all_bic_results[[list_name]] <- bic_result
# --- END OF FIX ---
gams <- model_plot_modx_gam_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
smm_result = smm_results,
plot_label = current_plot_label,
centering = current_centering,
save_dir = smm_output_folder
)
all_gam_results[[list_name]] <- gams
}
message(paste0("✅ Finished analysis for: '", current_plot_label, "' (", current_centering, "-centered)"))
}
# Load required libraries
library(dplyr)
library(mgcv)
library(gamm4)
library(ggplot2)
library(glue)
library(tidyr)
library(purrr)
library(lubridate)
library(zoo)
library(marginaleffects)
# Set random seed for reproducibility
set.seed(
123
)
load("~/CLEAR Lab Repositories/adhd-cycle/data/adhd_daily_scaled_20250929.rdata") # Enter the file path for your data file; note that it must include pacts_scaling() output and there must be 5 observations per phase per person to include.
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
smm_output_folder <- file.path(output_folder_base, "SMM_outputs") # Simplified folder name
if (!dir.exists(smm_output_folder)) {
dir.create(smm_output_folder, recursive = TRUE)
}
menses_time_variable <- "cyclic_time_impute"
ovulation_time_variable <- "cyclic_time_imp_ov"
outcomes <- c(
"CSS_Inatt" = "CSS Inattention Sx Severity",
"CSS_HypImp" = "CSS Hyperactivity/Impulsivity Sx Severity",
"CSS_Inatt_Count" = "CSS Inattention Sx Count",
"CSS_Hyp_Count" = "CSS Hyperactivity Sx Count",
"CSS_Imp_Count" = "CSS Impulsivity Sx Count",
"score_pinball_rev" = "Working Memory (Reversed Pinball Performance)",
"score_robot_rev" = "Response Disinhibition (Reversed Robot Performance)",
"BDEFS_WM_avg" = "Working Memory Sx (BDEFS)",
"BDEFS_RI_avg" = "Response Inhibition Sx (BDEFS)",
"DRSP_1" = "Depressed Mood",
"DRSP_2" = "Hopelessness",
"DRSP_3" = "Worthlessness/Guilt",
"DRSP_4" = "Anxiety/Nervousness",
"DRSP_5" = "Mood Swings",
"DRSP_6" = "Rejection Sensitivity",
"DRSP_7" = "Anger/Irritability",
"DRSP_8" = "Interpersonal Conflict",
"DRSP_9" = "Less Interest in Activities",
"DRSP_10" = "Difficulty Concentrating",
"DRSP_11" = "Lethargy/Fatigue",
"DRSP_12" = "Increased Appetite/Overate",
"DRSP_13" = "Food Cravings",
"DRSP_14" = "Hypersomnia",
"DRSP_15" = "Insomnia",
"DRSP_16" = "Overwhelmed/Couldn't Cope",
"DRSP_17" = "Felt Out of Control",
"DRSP_18" = "Breast Tenderness",
"DRSP_19" = "Swelling/Bloating",
"DRSP_20" = "Headache",
"DRSP_21" = "Joint/Muscle Pain",
"DRSP_22" = "Work Impairment",
"DRSP_23" = "Relationship Impairment",
"E2" = "Estradiol",
"P4" = "Progesterone",
"LH" = "Luteinizing Hormone",
"UPPS_NU_avg" = "UPPS Negative Urgency",
"UPPS_PU_avg" = "UPPS Positive Urgency",
"UPPS_Premed_avg" = "UPPS (Lack of) Premeditation",
"UPPS_Persev_avg" = "UPPS (Lack of) Perseverance",
"UPPS_Sens_avg" = "UPPS Sensation Seeking",
"DEBQ_Total" = "DEBQ Total Score"
)
# Source function files
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/preprocess_outcome.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/subset_by_phase_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/run_smm_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/model_plot_gam_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/compare_bic_cyclic.R")
# --- AUTOMATED ANALYSIS LOOP ---
analysis_combinations <- expand.grid(
outcome = names(outcomes),
centering = c("menses", "ovulation"),
stringsAsFactors = FALSE
)
all_smm_results <- list()
all_bic_results <- list()
all_gam_results <- list()
for (i in 1:nrow(analysis_combinations)) {
current_outcome <- analysis_combinations$outcome[i]
current_centering <- analysis_combinations$centering[i]
current_plot_label <- outcomes[current_outcome]
current_time_var <- ifelse(current_centering == "menses", menses_time_variable, ovulation_time_variable)
message(paste0("\n🚀 Starting analysis for: '", current_plot_label, "' (", current_centering, "-centered)"))
preprocessed_data <- preprocess_outcome(data = cycle_df_scaled, outcome = current_outcome)
subset_result <- subset_by_phase_cyclic(
data = preprocessed_data,
outcome = current_outcome,
time_var = current_time_var,
min_obs = 4
)
data_for_analysis <- subset_result$data_subset
if (nrow(data_for_analysis) < 15) {
message(paste0("⚠️ Skipping '", current_plot_label, "' due to insufficient data after subsetting."))
next
}
smm_results <- run_smm_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
plot_label = current_plot_label,
g = 2:4,
centering = current_centering,
save_dir = smm_output_folder
)
list_name <- paste0(current_outcome, "_", current_centering)
all_smm_results[[list_name]] <- smm_results
# --- ‼️ ADDED THIS BLOCK BACK IN TO GENERATE THE BIC PLOT ‼️ ---
if (!is.null(smm_results) && length(smm_results$all_results) > 0) {
bic_result <- compare_bic_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
centering = current_centering,
smm_results = smm_results,
save_dir = smm_output_folder
)
all_bic_results[[list_name]] <- bic_result
# --- END OF FIX ---
gams <- model_plot_modx_gam_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
smm_result = smm_results,
plot_label = current_plot_label,
centering = current_centering,
save_dir = smm_output_folder
)
all_gam_results[[list_name]] <- gams
}
message(paste0("✅ Finished analysis for: '", current_plot_label, "' (", current_centering, "-centered)"))
}
message("\n🏁 ALL OUTCOMES PROCESSED! 🏁")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(mgcv)
library(gamm4)
library(ggplot2)
library(zoo)
library(glue)
library(slider)
library(cowplot)
library(ggplot2)
library(stringr)
library(tools)
library(ggplot2)
library(png)
library(grid)
library(cowplot)
library(gridExtra)
library(ggpubr)
# Evaluate other libraries needed in this document
library(rmcorr)
library(performance)
library(lme4)
library(ggplot2)
#library(here)
library(knitr)
library(kableExtra) # for formatting tables
library(psych)
library(GGally) # for correlation matrix
library(ggrepel)
#Load final copy of cleaned dataset cycle_df_scaled rdata from the folder here to /data:  /Users/toryeisenlohr-moul/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/interim_datasets/adhd_daily_scaled_20250927.rdata
#load("/Users/toryeisenlohr-moul/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/interim_datasets/adhd_daily_scaled_20250927.rdata")
# Save a copy of cycle_df_scaled as an rdata file to /data in the repo
#save(cycle_df_scaled, file = "~/CLEAR Lab Repositories/adhd-cycle/data/cycle_df_scaled_20250927.rdata")
# set wd to repo
setwd("~/CLEAR Lab Repositories/adhd-cycle")
# load a copy of cycle_df_scaled from /data in the repo
load("~/CLEAR Lab Repositories/adhd-cycle/data/adhd_daily_scaled_20250929.rdata")
# Define a base output location and create a unique, timestamped subfolder for this specific run.
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
figure_output_folder <- file.path(output_folder_base, "6_Fig_Output") # Simplified folder name
if (!dir.exists(figure_output_folder)) {
dir.create(figure_output_folder, recursive = TRUE)
}
# Define the directory containing the figures
figure_directory <- latest_gamm_output
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
latest_gamm_output <- gamm_directory
# Define the directory containing the figures
figure_directory <- latest_gamm_output
# Define the directory containing the figures
latest_gamm_output
# --- 1. Setup ---
# Assume 'cycle_df_scaled' is your pre-existing dataframe
# --- Output Folder ---
# Define a base output location
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/2_gamm_output"
# Create a unique, timestamped subfolder path for this run's figures
gamm_directory <- file.path(output_folder_base,format(Sys.Date(), "%Y-%m-%d/"))
# Create the directory if it doesn't already exist
# The `recursive = TRUE` argument ensures all parent folders are also created if needed.
if (!dir.exists(gamm_directory)) {
dir.create(gamm_directory, recursive = TRUE)
}
print(gamm_directory)
latest_gamm_folder <- print(gamm_directory)
print(latest_gamm_folder)
# Define the directory containing the figures
latest_gamm_folder
# List all PNG files in the directory
png_files <- list.files(latest_gamm_folder, pattern = "\\.png$", full.names = TRUE)
# Print just the text filenames without the full path
print(basename(png_files))
# --------------------------------------------------------------------------
# NEW: Define the desired order of your plot filenames
# --------------------------------------------------------------------------
# List the base filenames (e.g., "my_plot.png") in the exact order
# you want them to appear in the grid (top-left, top-right, middle-left, etc.).
plot_order <- c(
"gamplot_CSS_Inatt_Log_cyclic_time_impute_20250930.png", "gamplot_CSS_HypImp_Log_cyclic_time_impute_20250930.png",
"gamplot_score_pinball_Log_cyclic_time_impute_20250930.png", "gamplot_score_robot_Log_cyclic_time_impute_20250930.png"
)
# Create the full file paths based on your specified order
png_files <- file.path(figure_directory, plot_order)
# --------------------------------------------------------------------------
# NEW: Define the desired order of your plot filenames
# --------------------------------------------------------------------------
# List the base filenames (e.g., "my_plot.png") in the exact order
# you want them to appear in the grid (top-left, top-right, middle-left, etc.).
plot_order <- c(
"gamplot_CSS_Inatt_Log_cyclic_time_impute_20250930.png", "gamplot_CSS_HypImp_Log_cyclic_time_impute_20250930.png",
"gamplot_score_pinball_Log_cyclic_time_impute_20250930.png", "gamplot_score_robot_Log_cyclic_time_impute_20250930.png"
)
# Create the full file paths based on your specified order
png_files <- file.path(latest_gamm_folder, plot_order)
# --------------------------------------------------------------------------
# Load each PNG file as a ggplot object
# This now loads the files in the order you defined above
plots <- lapply(png_files, function(file) {
img <- png::readPNG(file)
ggplot() +
annotation_custom(rasterGrob(img, width = unit(1, "npc"), height = unit(1, "npc"))) +
theme_void()
})
latest_gamm_folder
# Define the directory containing the figures - defined int he ADHD_CYCLE_2_GAMMs.Rmd script
latest_gamm_folder
# Create the full file paths (it's okay if this creates a double slash)
png_files <- file.path(latest_gamm_folder, plot_order)
# This check will find the real source of your error
files_exist <- file.exists(png_files)
if (!all(files_exist)) {
# If a file is missing, this will tell you exactly which one.
missing_files <- png_files[!files_exist]
stop("Execution halted. The following file(s) could not be found:\n- ",
paste(missing_files, collapse = "\n- "))
}
# Define the directory containing the figures - defined int he ADHD_CYCLE_2_GAMMs.Rmd script
latest_gamm_folder
# List all PNG files in the directory
png_files <- list.files(latest_gamm_folder, pattern = "\\.png$", full.names = TRUE)
# Print just the text filenames without the full path
print(basename(png_files))
# --------------------------------------------------------------------------
# 1. SETUP: Define your folders and file order
# --------------------------------------------------------------------------
# --- Make sure these two variables are defined correctly ---
latest_gamm_folder <- "/Users/toryeisenlohr-moul/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management,Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/2_gamm_output/2025-09-30/"
figure_output_folder <- figure_output_folder # <-- REPLACE WITH YOUR ACTUAL OUTPUT FOLDER PATH
# List the base filenames in the exact order you want them to appear.
plot_order <- c(
"gamplot_CSS_Inatt_Log_cyclic_time_impute_20250930.png",
"gamplot_CSS_HypImp_Log_cyclic_time_impute_20250930.png",
"gamplot_score_pinball_Log_cyclic_time_impute_20250930.png",
"gamplot_score_robot_Log_cyclic_time_impute_20250930.png"
)
# Create the full file paths
png_files <- file.path(latest_gamm_folder, plot_order)
# --------------------------------------------------------------------------
# 2. THE FIX: Check if all files exist BEFORE trying to load them
# --------------------------------------------------------------------------
files_exist <- file.exists(png_files)
if (!all(files_exist)) {
# If any file is missing, the script will stop and give you a clear error.
missing_files <- png_files[!files_exist]
stop("Execution halted. The following file(s) could not be found:\n- ",
paste(missing_files, collapse = "\n- "))
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(mgcv)
library(gamm4)
library(ggplot2)
library(zoo)
library(glue)
library(slider)
library(cowplot)
library(ggplot2)
library(stringr)
library(tools)
library(ggplot2)
library(png)
library(grid)
library(cowplot)
library(gridExtra)
library(ggpubr)
# Evaluate other libraries needed in this document
library(rmcorr)
library(performance)
library(lme4)
library(ggplot2)
#library(here)
library(knitr)
library(kableExtra) # for formatting tables
library(psych)
library(GGally) # for correlation matrix
library(ggrepel)
#Load final copy of cleaned dataset cycle_df_scaled rdata from the folder here to /data:  /Users/toryeisenlohr-moul/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/interim_datasets/adhd_daily_scaled_20250927.rdata
#load("/Users/toryeisenlohr-moul/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/interim_datasets/adhd_daily_scaled_20250927.rdata")
# Save a copy of cycle_df_scaled as an rdata file to /data in the repo
#save(cycle_df_scaled, file = "~/CLEAR Lab Repositories/adhd-cycle/data/cycle_df_scaled_20250927.rdata")
# set wd to repo
setwd("~/CLEAR Lab Repositories/adhd-cycle")
# load a copy of cycle_df_scaled from /data in the repo
load("~/CLEAR Lab Repositories/adhd-cycle/data/adhd_daily_scaled_20250929.rdata")
# Define a base output location and create a unique, timestamped subfolder for this specific run.
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
figure_output_folder <- file.path(output_folder_base, "6_Fig_Output") # Simplified folder name
if (!dir.exists(figure_output_folder)) {
dir.create(figure_output_folder, recursive = TRUE)
}
# ===================================================================
# 1. Load Required Libraries
# ===================================================================
library(tidyverse)
library(rmcorr)
library(performance)
library(lme4)
library(ggplot2)
# ===================================================================
# 2. Define the Heatmap Generation Function
# ===================================================================
generate_correlation_heatmap <- function(
data, outcome_vars, id_var,
sig.level = 0.05,
highlight_diag = TRUE,
show_legend = TRUE,
label_size = 4.6,
diag_label_size = 6,
subtitle_text = "Upper: Between-person (Spearman); Lower: Within-person (rmcorr); Diagonal: ICC"
) {
# This line MUST be first to define the number of variables.
n_vars <- length(outcome_vars)
results_matrix <- matrix(NA, nrow = n_vars, ncol = n_vars,
dimnames = list(outcome_vars, outcome_vars))
pval_matrix <- matrix(NA, nrow = n_vars, ncol = n_vars,
dimnames = list(outcome_vars, outcome_vars))
# --- Between-person (upper triangle) ---
person_means <- data %>%
group_by(!!sym(id_var)) %>%
summarise(across(all_of(outcome_vars), ~ mean(., na.rm = TRUE)), .groups = "drop")
between_corr <- suppressWarnings(
cor(person_means[, outcome_vars], method = "spearman", use = "pairwise.complete.obs")
)
for (i in 1:(n_vars - 1)) for (j in (i + 1):n_vars) {
x <- person_means[[outcome_vars[i]]]
y <- person_means[[outcome_vars[j]]]
if (sum(!is.na(x) & !is.na(y)) > 2) {
test <- suppressWarnings(cor.test(x, y, method = "spearman"))
results_matrix[i, j] <- between_corr[i, j]
pval_matrix[i, j] <- test$p.value
}
}
# --- ICC (diagonal) ---
for (i in 1:n_vars) {
var <- outcome_vars[i]
# Backticks handle variable names with spaces
fml <- as.formula(paste0("`", var, "` ~ 1 + (1|`", id_var, "`)"))
if (sum(!is.na(data[[var]])) > 1) {
model_fit <- try(lmer(fml, data = data), silent = TRUE)
if (!inherits(model_fit, "try-error")) {
icc_val <- performance::icc(model_fit)$ICC_adjusted
results_matrix[i, i] <- icc_val
pval_matrix[i, i] <- 0
}
}
}
# --- Within-person (lower triangle) ---
for (i in 2:n_vars) for (j in 1:(i - 1)) {
var1 <- outcome_vars[i]; var2 <- outcome_vars[j]
rmcorr_data <- data %>% select(all_of(c(id_var, var1, var2))) %>% drop_na()
if (nrow(rmcorr_data) > 2) {
rmcorr_result <- rmcorr::rmcorr(participant = id_var, measure1 = var1, measure2 = var2, dataset = rmcorr_data)
results_matrix[i, j] <- rmcorr_result$r
pval_matrix[i, j] <- rmcorr_result$p
}
}
# --- Reorder by clustering ---
within_corr_matrix <- results_matrix
within_corr_matrix[upper.tri(within_corr_matrix, diag = TRUE)] <- 0
dist_matrix <- as.dist(1 - abs(within_corr_matrix))
hclust_obj <- hclust(dist_matrix, method = "ward.D2")
corr_order <- rownames(within_corr_matrix)[hclust_obj$order]
results_matrix_ordered <- results_matrix[corr_order, corr_order]
pval_matrix_ordered    <- pval_matrix[corr_order, corr_order]
# --- Long form for plotting ---
plot_df <- as.data.frame(as.table(results_matrix_ordered))
names(plot_df) <- c("Var1", "Var2", "value")
plot_df$p.value <- as.vector(pval_matrix_ordered)
plot_df$Var1 <- factor(plot_df$Var1, levels = rev(corr_order))
plot_df$Var2 <- factor(plot_df$Var2, levels = corr_order)
no_leading_zero <- function(x) {
ifelse(is.na(x), NA_character_,
sub("^(-?)0\\.", "\\1.", sprintf("%.2f", x)))
}
plot_df <- plot_df %>%
mutate(
is_diag = as.character(Var1) == as.character(Var2),
is_sig  = p.value < sig.level,
label   = no_leading_zero(value)
)
diag_df    <- plot_df %>% filter(is_diag)
sig_df     <- plot_df %>% filter(!is_diag & is_sig)
nonsig_df  <- plot_df %>% filter(!is_diag & !is_sig)
# --- Plot ---
p <- ggplot() +
geom_tile(data = plot_df %>% filter(!is_diag),
aes(x = Var2, y = Var1, fill = value), color = "gray70", linewidth = 0.5) +
geom_tile(data = diag_df, aes(x = Var2, y = Var1),
fill = "gray92", color = "gray70", linewidth = 0.5) +
scale_fill_gradient2(
low = "#6D9EC1", mid = "white", high = "#E46726",
midpoint = 0, limits = c(-1, 1), name = "Correlation"
) +
labs(
title = "Multilevel Correlation Matrix of Daily Outcomes",
subtitle = subtitle_text
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, face = "bold", size = 20),
plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12, margin = margin(b = 6)),
axis.text.x   = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y   = element_text(face = "bold"),
axis.title    = element_blank(),
legend.position = if (show_legend) "right" else "none",
panel.grid.major = element_blank()
)
p <- p +
geom_text(data = sig_df, aes(x = Var2, y = Var1, label = label),
fontface = "bold", color = "black", size = label_size, na.rm = TRUE) +
geom_text(data = nonsig_df, aes(x = Var2, y = Var1, label = label),
color = "gray40", size = label_size, na.rm = TRUE)
if (highlight_diag && nrow(diag_df) > 0) {
p <- p +
geom_text(data = diag_df, aes(x = Var2, y = Var1, label = label),
fontface = "bold", color = "#4B0082", size = diag_label_size, na.rm = TRUE)
}
return(p)
}
# ===================================================================
# 3. Define Parameters and Run the Plot
# ===================================================================
# This is the cleaned list of variables.
corrplotlist <- c(
"CSS_Inatt" = "Inattentive Sx",
"CSS_HypImp" = "Hyperactive/Impulsive Sx",
"E2.3roll" = "E2",
"P4.3roll" = "P4",
"score_pinball_rev" = "Working Memory Deficits (Pinball Task)",
"score_robot_rev" = "Response Disinhibition (Robot Task)",
"DRSP_1" = "Depression",
"DRSP_4" = "Anxiety",
"DRSP_7" = "Irritability",
"DRSP_21" = "Physical Pain"
)
# This assumes `cycle_df_scaled` exists in your environment
if (exists("cycle_df_scaled") && exists("corrplotlist")) {
# Prepare the data by selecting and renaming columns
original_vars <- names(corrplotlist)
plot_data <- cycle_df_scaled[, c("id", original_vars)]
names(plot_data)[match(original_vars, names(plot_data))] <- corrplotlist
# Call the function with the prepared `plot_data`
correlation_heatmap <- generate_correlation_heatmap(
data = plot_data,
outcome_vars = corrplotlist,
id_var = "id"
)
print(correlation_heatmap)
} else {
warning("Data 'cycle_df_scaled' or 'corrplotlist' not found.")
}
# Define the directory containing the figures - defined int he ADHD_CYCLE_2_GAMMs.Rmd script
latest_gamm_folder
# List all PNG files in the directory
png_files <- list.files(latest_gamm_folder, pattern = "\\.png$", full.names = TRUE)
# Print just the text filenames without the full path
print(basename(png_files))
