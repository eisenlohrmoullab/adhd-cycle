names(knots_list) <- time_var
# Run the GAMM model
gamm <- mgcv::gam(
formula = gamm_formula,
data = datSX,
knots = knots_list,
method = 'REML'
)
# Save the model summary to a file
summary_filename <- paste0(gamm_directory, "gamm_", log_outcome_var, "_", time_var, "_summary_", current_date, ".txt")
sink(summary_filename)
print(summary(gamm))
sink()
# --------------------------------------------------------------------------
# NEW: Extract GAM Summary for Both Fixed and Random Effects
# --------------------------------------------------------------------------
gamm_summary <- summary(gamm)
# --- Part A: Average Effect (s(time_var)) ---
avg_eff_term <- paste0("s(", time_var, ")")
avg_eff_edf <- gamm_summary$s.table[avg_eff_term, "edf"]
avg_eff_pval <- gamm_summary$s.table[avg_eff_term, "p-value"]
avg_eff_stars <- case_when(
avg_eff_pval < 0.001 ~ "***",
avg_eff_pval < 0.01  ~ "**",
avg_eff_pval < 0.05  ~ "*",
TRUE               ~ ""
)
avg_eff_text <- paste0("Average Cycle Effect: ", round(avg_eff_edf, 2), avg_eff_stars)
# --- Part B: Individual Differences (s(id,time_var)) ---
ind_diff_term <- paste0("s(id,", time_var, ")")
ind_diff_edf <- gamm_summary$s.table[ind_diff_term, "edf"]
ind_diff_pval <- gamm_summary$s.table[ind_diff_term, "p-value"]
ind_diff_stars <- case_when(
ind_diff_pval < 0.001 ~ "***",
ind_diff_pval < 0.01  ~ "**",
ind_diff_pval < 0.05  ~ "*",
TRUE                ~ ""
)
ind_diff_text <- paste0("Individual Differences in Cycle Effect: ", round(ind_diff_edf, 2), ind_diff_stars)
# --- Part C: Combine for the final annotation text ---
# We use "\n" to create a line break between the two parts
annotation_text <- paste(avg_eff_text, ind_diff_text, sep = "\n")
# --------------------------------------------------------------------------
# --- Plotting ---
# Create a named list for expand.grid
grid_list <- list(seq(-1, 1, by = 0.05), id = 0)
names(grid_list)[1] <- time_var
plotdat <- do.call(expand.grid, grid_list)
# Get predictions and back-transform them
pred <- marginaleffects::predictions(
gamm,
newdata = plotdat,
type = "response",
transform = function(x) exp(x) - 1
)
plotdat$estimate <- pred$estimate
plotdat$conf.low <- pred$conf.low
plotdat$conf.high <- pred$conf.high
# Generate the plot
gamplot <- ggplot(plotdat, aes(x = .data[[time_var]], y = estimate)) +
scale_x_continuous(
limits = c(-1, 1),
breaks = seq(-1, 1, by = 0.50),
labels = c("Ovulation", "50%L", "Menses Onset", "50%F", "Ovulation")
) +
labs(x = "", y = outcome_label) +
geom_rect(xmin = -0.04, xmax = 0.04, ymin = -Inf, ymax = Inf, fill = "grey70", alpha = 0.2, color = "white") +
geom_rect(xmin = 0.92, xmax = 1, ymin = -Inf, ymax = Inf, fill = "grey87", alpha = 0.2, color = "white") +
geom_line(linewidth = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "lightgrey", alpha = 0.3) +
theme_minimal() +
# --- UPDATED: Add the new two-line annotation ---
annotate(
geom = "text",
x = -1,          # Position on the far left of the x-axis
y = Inf,         # Position at the top of the y-axis
label = annotation_text,
hjust = 0,       # Left-align the text
vjust = 1.5,     # Nudge the text down from the top (increased for two lines)
fontface = "italic",
size = 4         # Slightly smaller size to fit better
)
print(gamplot)
# Save the plot
plot_filename <- paste0(gamm_directory, "gamplot_", log_outcome_var, "_", time_var, "_", current_date, ".png")
ggsave(plot_filename, gamplot, width = 8, height = 6, dpi = 500)
}
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
# This chunk loads all the packages needed for the analysis.
library(tidyverse)       # A collection of essential packages for data manipulation and visualization (includes dplyr, ggplot2, etc.)
library(janitor)         # Provides functions for cleaning data and table creation.
library(haven)           # For reading data from other statistical software like SPSS (.sav).
library(readxl)          # For reading data from Excel files (.xls, .xlsx).
library(zoo)             # For calculating rolling averages.
library(lubridate)       # For making it easier to work with dates and times.
library(conflicted)      # Helps manage function name conflicts between packages.
library(menstrualcycleR) # For cycle-specific analyses like PACTS scaling.
library(gridExtra)       # For arranging multiple plots on one page.
library(ggvenn)          # For creating Venn diagrams.
library(readr)       # For reading CSV files
library(dplyr)       # For data wrangling
library(lubridate)   # For date parsing/manipulation
library(tidyr)       # For tidying data
library(rlang)       # For tidy evaluation
library(visdat)      # For missing data visualization
library(ggpubr)      # For publication-ready plots
library(mgcv)        # For Generalized Additive Models (GAMs)
library(gamm4)       # For GAMs with mixed effects
library(ggplot2)     # For data visualization
library(marginaleffects) # For calculating marginal effects and predictions
library(glue)        # For string interpolation
library(broom)       # For tidying model outputs
# Explicitly state our function preferences to avoid ambiguity when multiple
# packages have a function with the same name.
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("summarize", "dplyr")
# --- 1. Setup ---
# Assume 'cycle_df_scaled' is your pre-existing dataframe
# --- Output Folder ---
# Define a base output location
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output/2_gamm_output"
# Create a unique, timestamped subfolder path for this run's figures
gamm_directory <- file.path(output_folder_base,format(Sys.Date(), "%Y-%m-%d/"))
# Create the directory if it doesn't already exist
# The `recursive = TRUE` argument ensures all parent folders are also created if needed.
if (!dir.exists(gamm_directory)) {
dir.create(gamm_directory, recursive = TRUE)
}
# --- 2. Define Outcomes and Labels ---
# Create a named vector. The 'names' are the column names in your dataframe.
# The 'values' are the pretty labels you want on your plots.
source("~/CLEAR Lab Repositories/adhd-cycle/0_setup_scripts/outcomes_list.R")
# NOW CHECK that all outcome variable names exist in your dataframe
# Get the actual column names from the dataframe
actual_colnames <- names(cycle_df_scaled)
# Loop through your defined outcomes and check if they exist
for (outcome_to_check in names(outcomes)) {
if (outcome_to_check %in% actual_colnames) {
message(paste("✅ Found:", outcome_to_check))
} else {
message(paste("❌ NOT FOUND:", outcome_to_check))
}
}
# --- 1. Define the time variable you want to use ---
# You can easily switch this back to "cyclic_time" if needed
time_var <- "cyclic_time_impute"
# --- 3. Loop Through Each Outcome ---
for (outcome_var in names(outcomes)) {
outcome_label <- outcomes[outcome_var]
log_outcome_var <- paste0(outcome_var, "_Log")
message(paste("Processing outcome:", outcome_label, "with time variable:", time_var))
# Log-transform the current outcome variable
cycle_df_scaled[[log_outcome_var]] <- log(cycle_df_scaled[[outcome_var]] + 1)
# Prepare data for the model
selected_vars <- c(time_var, log_outcome_var, "id")
datSX <- cycle_df_scaled[complete.cases(cycle_df_scaled[selected_vars]), ]
datSX$id <- as.factor(datSX$id)
# Dynamically create the formula for the GAM model
gamm_formula <- as.formula(paste(
log_outcome_var,
"~ s(id, bs = 're') + s(", time_var, ", bs = 'cc', k = 10) + s(id,", time_var, ", bs = c('re','cc'), k = c(NA, 10))"
))
# Create the knots list dynamically
knots_list <- list(c(-1, 1))
names(knots_list) <- time_var
# Run the GAMM model
gamm <- mgcv::gam(
formula = gamm_formula,
data = datSX,
knots = knots_list,
method = 'REML'
)
# Save the model summary to a file
summary_filename <- paste0(gamm_directory, "gamm_", log_outcome_var, "_", time_var, "_summary_", current_date, ".txt")
sink(summary_filename)
print(summary(gamm))
sink()
# --------------------------------------------------------------------------
# NEW: Extract GAM Summary for Both Fixed and Random Effects
# --------------------------------------------------------------------------
gamm_summary <- summary(gamm)
# --- Part A: Average Effect (s(time_var)) ---
avg_eff_term <- paste0("s(", time_var, ")")
avg_eff_edf <- gamm_summary$s.table[avg_eff_term, "edf"]
avg_eff_pval <- gamm_summary$s.table[avg_eff_term, "p-value"]
avg_eff_stars <- case_when(
avg_eff_pval < 0.001 ~ "***",
avg_eff_pval < 0.01  ~ "**",
avg_eff_pval < 0.05  ~ "*",
TRUE               ~ ""
)
avg_eff_text <- paste0("Average Cycle Effect: ", round(avg_eff_edf, 2), avg_eff_stars)
# --- Part B: Individual Differences (s(id,time_var)) ---
ind_diff_term <- paste0("s(id,", time_var, ")")
ind_diff_edf <- gamm_summary$s.table[ind_diff_term, "edf"]
ind_diff_pval <- gamm_summary$s.table[ind_diff_term, "p-value"]
ind_diff_stars <- case_when(
ind_diff_pval < 0.001 ~ "***",
ind_diff_pval < 0.01  ~ "**",
ind_diff_pval < 0.05  ~ "*",
TRUE                ~ ""
)
ind_diff_text <- paste0("Individual Differences in Cycle Effect: ", round(ind_diff_edf, 2), ind_diff_stars)
# --- Part C: Combine for the final annotation text ---
# We use "\n" to create a line break between the two parts
annotation_text <- paste(avg_eff_text, ind_diff_text, sep = "\n")
# --------------------------------------------------------------------------
# --- Plotting ---
# Create a named list for expand.grid
grid_list <- list(seq(-1, 1, by = 0.05), id = 0)
names(grid_list)[1] <- time_var
plotdat <- do.call(expand.grid, grid_list)
# Get predictions and back-transform them
pred <- marginaleffects::predictions(
gamm,
newdata = plotdat,
type = "response",
transform = function(x) exp(x) - 1
)
plotdat$estimate <- pred$estimate
plotdat$conf.low <- pred$conf.low
plotdat$conf.high <- pred$conf.high
# Generate the plot
gamplot <- ggplot(plotdat, aes(x = .data[[time_var]], y = estimate)) +
scale_x_continuous(
limits = c(-1, 1),
breaks = seq(-1, 1, by = 0.50),
labels = c("Ovulation", "50%L", "Menses Onset", "50%F", "Ovulation")
) +
labs(x = "", y = outcome_label) +
geom_rect(xmin = -0.04, xmax = 0.04, ymin = -Inf, ymax = Inf, fill = "grey70", alpha = 0.2, color = "white") +
geom_rect(xmin = 0.92, xmax = 1, ymin = -Inf, ymax = Inf, fill = "grey87", alpha = 0.2, color = "white") +
geom_line(linewidth = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "lightgrey", alpha = 0.3) +
theme_minimal() +
# --- UPDATED: Add the new two-line annotation ---
annotate(
geom = "text",
x = -1,          # Position on the far left of the x-axis
y = Inf,         # Position at the top of the y-axis
label = annotation_text,
hjust = 0,       # Left-align the text
vjust = 1.5,     # Nudge the text down from the top (increased for two lines)
fontface = "italic",
size = 4         # Slightly smaller size to fit better
)
print(gamplot)
# Save the plot
plot_filename <- paste0(gamm_directory, "gamplot_", log_outcome_var, "_", time_var, "_", current_date, ".png")
ggsave(plot_filename, gamplot, width = 8, height = 6, dpi = 500)
}
# print path represented by gamm_directory
latest_gamm_folder <- print(gamm_directory)
print(latest_gamm_folder)
outcomes <- c("score_pinball_rev" = "Working Memory Deficit (Reversed Pinball Performance)")
# --- 3. Loop Through Each Outcome ---
for (outcome_var in names(outcomes)) {
outcome_label <- outcomes[outcome_var]
log_outcome_var <- paste0(outcome_var, "_Log")
message(paste("Processing outcome:", outcome_label, "with time variable:", time_var))
# Log-transform the current outcome variable
cycle_df_scaled[[log_outcome_var]] <- log(cycle_df_scaled[[outcome_var]] + 1)
# Prepare data for the model
selected_vars <- c(time_var, log_outcome_var, "id")
datSX <- cycle_df_scaled[complete.cases(cycle_df_scaled[selected_vars]), ]
datSX$id <- as.factor(datSX$id)
# Dynamically create the formula for the GAM model
gamm_formula <- as.formula(paste(
log_outcome_var,
"~ s(id, bs = 're') + s(", time_var, ", bs = 'cc', k = 10) + s(id,", time_var, ", bs = c('re','cc'), k = c(NA, 10))"
))
# Create the knots list dynamically
knots_list <- list(c(-1, 1))
names(knots_list) <- time_var
# Run the GAMM model
gamm <- mgcv::gam(
formula = gamm_formula,
data = datSX,
knots = knots_list,
method = 'REML'
)
# Save the model summary to a file
summary_filename <- paste0(gamm_directory, "gamm_", log_outcome_var, "_", time_var, "_summary_", current_date, ".txt")
sink(summary_filename)
print(summary(gamm))
sink()
# --------------------------------------------------------------------------
# NEW: Extract GAM Summary for Both Fixed and Random Effects
# --------------------------------------------------------------------------
gamm_summary <- summary(gamm)
# --- Part A: Average Effect (s(time_var)) ---
avg_eff_term <- paste0("s(", time_var, ")")
avg_eff_edf <- gamm_summary$s.table[avg_eff_term, "edf"]
avg_eff_pval <- gamm_summary$s.table[avg_eff_term, "p-value"]
avg_eff_stars <- case_when(
avg_eff_pval < 0.001 ~ "***",
avg_eff_pval < 0.01  ~ "**",
avg_eff_pval < 0.05  ~ "*",
TRUE               ~ ""
)
avg_eff_text <- paste0("Average Cycle Effect: ", round(avg_eff_edf, 2), avg_eff_stars)
# --- Part B: Individual Differences (s(id,time_var)) ---
ind_diff_term <- paste0("s(id,", time_var, ")")
ind_diff_edf <- gamm_summary$s.table[ind_diff_term, "edf"]
ind_diff_pval <- gamm_summary$s.table[ind_diff_term, "p-value"]
ind_diff_stars <- case_when(
ind_diff_pval < 0.001 ~ "***",
ind_diff_pval < 0.01  ~ "**",
ind_diff_pval < 0.05  ~ "*",
TRUE                ~ ""
)
ind_diff_text <- paste0("Individual Differences in Cycle Effect: ", round(ind_diff_edf, 2), ind_diff_stars)
# --- Part C: Combine for the final annotation text ---
# We use "\n" to create a line break between the two parts
annotation_text <- paste(avg_eff_text, ind_diff_text, sep = "\n")
# --------------------------------------------------------------------------
# --- Plotting ---
# Create a named list for expand.grid
grid_list <- list(seq(-1, 1, by = 0.05), id = 0)
names(grid_list)[1] <- time_var
plotdat <- do.call(expand.grid, grid_list)
# Get predictions and back-transform them
pred <- marginaleffects::predictions(
gamm,
newdata = plotdat,
type = "response",
transform = function(x) exp(x) - 1
)
plotdat$estimate <- pred$estimate
plotdat$conf.low <- pred$conf.low
plotdat$conf.high <- pred$conf.high
# Generate the plot
gamplot <- ggplot(plotdat, aes(x = .data[[time_var]], y = estimate)) +
scale_x_continuous(
limits = c(-1, 1),
breaks = seq(-1, 1, by = 0.50),
labels = c("Ovulation", "50%L", "Menses Onset", "50%F", "Ovulation")
) +
labs(x = "", y = outcome_label) +
geom_rect(xmin = -0.04, xmax = 0.04, ymin = -Inf, ymax = Inf, fill = "grey70", alpha = 0.2, color = "white") +
geom_rect(xmin = 0.92, xmax = 1, ymin = -Inf, ymax = Inf, fill = "grey87", alpha = 0.2, color = "white") +
geom_line(linewidth = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "lightgrey", alpha = 0.3) +
theme_minimal() +
# --- UPDATED: Add the new two-line annotation ---
annotate(
geom = "text",
x = -1,          # Position on the far left of the x-axis
y = Inf,         # Position at the top of the y-axis
label = annotation_text,
hjust = 0,       # Left-align the text
vjust = 1.5,     # Nudge the text down from the top (increased for two lines)
fontface = "italic",
size = 4         # Slightly smaller size to fit better
)
print(gamplot)
# Save the plot
plot_filename <- paste0(gamm_directory, "gamplot_", log_outcome_var, "_", time_var, "_", current_date, ".png")
ggsave(plot_filename, gamplot, width = 8, height = 6, dpi = 500)
}
# print path represented by gamm_directory
latest_gamm_folder <- print(gamm_directory)
print(latest_gamm_folder)
# List all PNG files in the directory
png_files <- list.files(gamm_directory, pattern = "\\.png$", full.names = TRUE)
# Print just the text filenames without the full path
print(basename(png_files))
# List the base filenames (e.g., "my_plot.png") in the exact order
# you want them to appear in the grid (top-left, top-right, middle-left, etc.).
plot_order <- c(
"gamplot_CSS_Inatt_Log_cyclic_time_impute_20250930.png", "gamplot_CSS_HypImp_Log_cyclic_time_impute_20250930.png",
"gamplot_score_pinball_rev_Log_cyclic_time_impute_20250930.png", "gamplot_score_robot_rev_Log_cyclic_time_impute_20250930.png"
)
# Create the full file paths based on your specified order
png_files <- file.path(gamm_directory, plot_order)
# --------------------------------------------------------------------------
# Load each PNG file as a ggplot object
# This now loads the files in the order you defined above
plots <- lapply(png_files, function(file) {
img <- png::readPNG(file)
ggplot() +
annotation_custom(rasterGrob(img, width = unit(1, "npc"), height = unit(1, "npc"))) +
theme_void()
})
# Arrange plots into a grid layout
# With ncol=2, the plots will fill the grid according to your specified order
plot_grid <- cowplot::plot_grid(plotlist = plots, ncol = 2)
# Display the combined plot
print(plot_grid)
# Define the final filename, including today's date
dated_output_file <- file.path(figure_directory,
paste0("Fig2_",
format(Sys.Date(), "%Y%m%d"),
".png"))
# Save the plot directly to the final, dated file
ggsave(filename = dated_output_file,
plot = plot_grid,
width = 11,
height = 8.5)
source("~/CLEAR Lab Repositories/adhd-cycle/0_setup_scripts/outcomes_list.r")
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
smm_output_folder <- file.path(output_folder_base, "3_smm_output") # Simplified folder name
if (!dir.exists(smm_output_folder)) {
dir.create(smm_output_folder, recursive = TRUE)
}
# Load required libraries
library(dplyr)
library(mgcv)
library(gamm4)
library(ggplot2)
library(glue)
library(tidyr)
library(purrr)
library(lubridate)
library(zoo)
library(marginaleffects)
# Set random seed for reproducibility
set.seed(
123
)
menses_time_variable <- "cyclic_time_impute"
ovulation_time_variable <- "cyclic_time_imp_ov"
source("~/CLEAR Lab Repositories/adhd-cycle/0_setup_scripts/outcomes_list.R")
# Source function files
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/preprocess_outcome.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/subset_by_phase_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/run_smm_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/model_plot_gam_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/compare_bic_cyclic.R")
outcomes <- c("score_pinball_rev" = "Working Memory Deficit (Reversed Pinball Performance)")
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
smm_output_folder <- file.path(output_folder_base, "3_smm_output") # Simplified folder name
if (!dir.exists(smm_output_folder)) {
dir.create(smm_output_folder, recursive = TRUE)
}
menses_time_variable <- "cyclic_time_impute"
ovulation_time_variable <- "cyclic_time_imp_ov"
# Source function files
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/preprocess_outcome.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/subset_by_phase_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/run_smm_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/model_plot_gam_cyclic.R")
source("~/CLEAR Lab Repositories/code_templates/3_model/smm/compare_bic_cyclic.R")
# --- AUTOMATED ANALYSIS LOOP ---
analysis_combinations <- expand.grid(
outcome = names(outcomes),
centering = c("menses", "ovulation"),
stringsAsFactors = FALSE
)
all_smm_results <- list()
all_bic_results <- list()
all_gam_results <- list()
for (i in 1:nrow(analysis_combinations)) {
current_outcome <- analysis_combinations$outcome[i]
current_centering <- analysis_combinations$centering[i]
current_plot_label <- outcomes[current_outcome]
current_time_var <- ifelse(current_centering == "menses", menses_time_variable, ovulation_time_variable)
message(paste0("\n🚀 Starting analysis for: '", current_plot_label, "' (", current_centering, "-centered)"))
preprocessed_data <- preprocess_outcome(data = cycle_df_scaled, outcome = current_outcome)
subset_result <- subset_by_phase_cyclic(
data = preprocessed_data,
outcome = current_outcome,
time_var = current_time_var,
min_obs = 4
)
data_for_analysis <- subset_result$data_subset
if (nrow(data_for_analysis) < 15) {
message(paste0("⚠️ Skipping '", current_plot_label, "' due to insufficient data after subsetting."))
next
}
smm_results <- run_smm_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
plot_label = current_plot_label,
g = 2:4,
centering = current_centering,
save_dir = smm_output_folder
)
list_name <- paste0(current_outcome, "_", current_centering)
all_smm_results[[list_name]] <- smm_results
# --- ‼️ ADDED THIS BLOCK BACK IN TO GENERATE THE BIC PLOT ‼️ ---
if (!is.null(smm_results) && length(smm_results$all_results) > 0) {
bic_result <- compare_bic_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
centering = current_centering,
smm_results = smm_results,
save_dir = smm_output_folder
)
all_bic_results[[list_name]] <- bic_result
# --- END OF FIX ---
gams <- model_plot_modx_gam_cyclic(
data = data_for_analysis,
outcome = current_outcome,
time_var = current_time_var,
smm_result = smm_results,
plot_label = current_plot_label,
centering = current_centering,
save_dir = smm_output_folder
)
all_gam_results[[list_name]] <- gams
}
message(paste0("✅ Finished analysis for: '", current_plot_label, "' (", current_centering, "-centered)"))
}
source("~/CLEAR Lab Repositories/adhd-cycle/0_setup_scripts/outcomes_list.r")
message("\n🏁 ALL OUTCOMES PROCESSED! 🏁")
