"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load All Raw Data Sources ---
raw_daily_spss <- read_sav(path_raw_daily_spss)
raw_daily_csv <- read_csv(path_raw_daily_csv, show_col_types = FALSE)
supp_hormones <- read_csv(path_supp_hormones, show_col_types = FALSE)
final_hormone_batch <- read_csv(path_final_hormone_batch, show_col_types = FALSE)
# --- 2. Forcibly Combine and Clean the Two Main Daily Files ---
spss_prep <- raw_daily_spss %>% mutate(across(everything(), as.character))
csv_prep <- raw_daily_csv %>% mutate(across(everything(), as.character))
raw_daily_combined <- bind_rows(spss_prep, csv_prep) %>%
janitor::clean_names() %>%
mutate(
daterated = coalesce(ymd(date_rated), ymd(recorded_date)),
id = as.numeric(id)
) %>%
filter(!is.na(daterated)) %>%
distinct(id, daterated, .keep_all = TRUE)
# --- 3. Prepare Supplemental Files ---
supp_hormones_prep <- supp_hormones %>%
janitor::clean_names() %>%
mutate(id = as.numeric(id), date = ymd(date))
final_hormone_batch_prep <- final_hormone_batch %>%
janitor::clean_names() %>%
mutate(id = as.numeric(id), date = ymd(date_rated))
# --- 4. Build Final 'df' with All Joins and Cleaning ---
df <- raw_daily_combined %>%
left_join(supp_hormones_prep, by = c("id", "date_rated" = "date")) %>%
left_join(final_hormone_batch_prep, by = c("id", "date_rated" = "date")) %>%
mutate(
daterated = coalesce(ymd(date_rated_y), ymd(date_rated_x), ymd(recorded_date)),
id = as.numeric(id),
e2 = coalesce(as.numeric(e2_y), as.numeric(e2_x), as.numeric(estradiol)),
p4 = coalesce(as.numeric(p4_y), as.numeric(p4_x), as.numeric(progesterone)),
lh = coalesce(as.numeric(lh_y), as.numeric(lh_x), as.numeric(lh)),
across(any_of(c(paste0("drsp_", 1:23), paste0("css_b_", 1:18), paste0("bdefs_", 1:6), paste0("debq_", 1:13), "score_pinball", "score_robot", "upps_nu_avg", "upps_pu_avg", "upps_premed_avg", "upps_persev_avg", "upps_sens_avg")), as.numeric)
) %>%
select(id, daterated, e2, p4, lh, starts_with(c("css_", "bdefs_", "drsp_", "upps_", "debq_", "score_"))) %>%
filter(!is.na(id) & !is.na(daterated)) %>%
distinct(id, daterated, .keep_all = TRUE) %>%
group_by(id) %>%
complete(daterated = seq.Date(min(daterated, na.rm = TRUE), max(daterated, na.rm = TRUE), by = "day")) %>%
ungroup() %>%
mutate(date = daterated) %>%
arrange(id, daterated)
#This R Markdown document serves as a comprehensive analysis pipeline for the CYCADHD Daily dataset. It includes data loading, cleaning, processing, analysis, visualization, and exporting of final datasets. The script is modular and well-documented to facilitate reproducibility and ease of use.sethis::edit_r_environ(scope = "project")
# This chunk sets the global options for the entire R Markdown document.
# --- Load Custom Functions ---
# This command loads all functions from the specified file, making them
# available to the entire script from the very beginning.
source("functions.R") # Assumes functions.R is in the same directory
# --- knitr Options ---
knitr::opts_chunk$set(
echo = TRUE,       # Show R code in the output document.
warning = FALSE,   # Hide warning messages.
message = FALSE    # Hide other informational messages.
)
# --- R Options ---
options(
scipen = 999,      # Disable scientific notation (e.g., 1e+05).
digits = 3         # Set default number of digits for numeric output.
)
library(tidyverse)
library(janitor)
library(haven)
library(readxl)
library(zoo)
library(lubridate)
library(conflicted)
library(menstrualcycleR)
library(gridExtra)
library(ggvenn) # For Venn diagrams
# Explicitly state our function preferences to avoid ambiguity
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
# --- Project Paths ---
# The script uses an environment variable set in the .Renviron file to find the
# shared Box directory. This makes the script portable and reproducible.
path_to_box <- Sys.getenv("BOX_PROJECT_PATH")
# --- Input File Paths ---
# Define the full path to each raw data file needed for the analysis.
path_raw_daily_spss <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/2025.06.02 Daily Master.sav")
path_raw_daily_csv <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/01_raw_data/2024.04.24. Daily Master.csv")
path_supp_hormones <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/03_cleaned_data/adhdcyc_daily_2024_07_09_horm.csv")
path_knapp_dates <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/cycadhd_mensov_iso.csv")
path_final_hormone_batch <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-25/Martel_IRB52576_Results_E2_P4_LH 7-23-2025.csv")
path_final_dates <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-09-26/ADHDCYCLE_menses_ov_dates_FINAL.xls")
path_omit_ids <- file.path(path_to_box, "02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-26/adhdcyc_omit.xlsx")
# --- Output Folder ---
# Define and create a unique, timestamped folder for all generated plots and files.
output_folder <- file.path(path_to_box, "03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output", format(Sys.Date(), "%Y-%m-%d_Run"))
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# --- Variable Lists ---
# Define the key variables that will be processed in the script.
dv_list <- c("CSS_Inatt", "CSS_HypImp", "score_pinball", "score_robot", "BDEFS_Total", "BDEFS_WM_avg", "BDEFS_RI_avg", "UPPS_NU_avg", "UPPS_PU_avg", "UPPS_Premed_avg", "UPPS_Persev_avg", "UPPS_Sens_avg", "DEBQ_Total", "CSS_Inatt_Count", "CSS_Hyp_Count", "CSS_Imp_Count", "CSS_HypImp_Count", paste0("DRSP_", 1:23))
hormlist <- c("E2", "P4", "LH")
alldailyvars <- c(dv_list, hormlist)
# --- Plotting Configuration ---
# This table controls which plots are generated. Each row defines a set of plots.
metrics_to_plot <- tibble::tribble(
# ~metric_filter: Which calculated metric to plot (from the 'metric' column).
# ~folder_name: The subfolder where these plots will be saved.
# ~plot_subtitle: The subtitle that will appear on the plot.
# ~needs_facet: TRUE if hormones have different scales (e.g., raw values) and need separate panels.
# ~y_axis_label: The label for the y-axis.
~metric_filter, ~folder_name, ~plot_subtitle, ~needs_facet, ~y_axis_label,
"raw", "01_raw_faceted", "Raw Daily Values", TRUE, "Hormone Value",
"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load and Prepare All Raw Data Sources ---
# Load the main daily SPSS file
raw_daily_spss <- read_sav(path_raw_daily_spss) %>%
standardize_index_names() %>%
mutate(
# Create the definitive daterated column using your rule.
# coalesce() takes the first non-missing value from the columns listed.
daterated = coalesce(as.Date(daterated), as.Date(recorded_date)),
# Ensure id is numeric for joining later
id = as.numeric(id)
) %>%
# Select ONLY the columns we need for the analysis to prevent all other conflicts.
select(id, daterated, any_of(alldailyvars))
# Load the main daily CSV file
raw_daily_csv <- read_csv(path_raw_daily_csv) %>%
standardize_index_names() %>%
mutate(
# Apply the same logic here. ymd() is a robust way to parse character dates.
daterated = coalesce(ymd(daterated), ymd(recorded_date)),
id = as.numeric(id)
) %>%
# Select the same set of columns here to ensure compatibility.
select(id, daterated, any_of(alldailyvars))
# Load the other supplemental files
supp_hormones <- read_csv(path_supp_hormones) %>%
rename(daterated = date) %>%
mutate(id = as.numeric(id), daterated = ymd(daterated))
knapp_dates <- read_csv(path_knapp_dates) %>%
standardize_index_names() %>%
mutate(id = as.numeric(id))
final_hormone_batch <- read_csv(path_final_hormone_batch) %>%
standardize_index_names() %>%
mutate(id = as.numeric(id), daterated = as.Date(daterated))
# --- 2. Combine and Merge Data into the Master 'df' ---
# This bind_rows() call is now much safer as it only operates on clean, selected columns.
raw_daily_combined <- bind_rows(raw_daily_spss, raw_daily_csv) %>%
# In case of duplicates after the coalesce, keep the last entry.
# This assumes the later file (spss) might have more up-to-date info.
arrange(id, daterated) %>%
distinct(id, daterated, .keep_all = TRUE)
# Now, build the final 'df' starting with this combined daily data.
df <- raw_daily_combined %>%
left_join(supp_hormones, by = c("id", "daterated"), suffix = c(".raw", ".supp")) %>%
left_join(knapp_dates, by = "id") %>%
left_join(final_hormone_batch, by = c("id", "daterated")) %>%
mutate(
E2 = coalesce(E2, E2.supp, E2.raw), P4 = coalesce(P4, P4.supp, P4.raw), LH = coalesce(LH, LH.supp, LH.raw),
daterated = as.Date(daterated)
) %>%
select(-ends_with(".raw"), -ends_with(".supp")) %>%
filter(!is.na(id) & !is.na(daterated)) %>%
group_by(id) %>%
complete(daterated = seq.Date(min(daterated, na.rm = TRUE), max(daterated, na.rm = TRUE), by = "day")) %>%
ungroup() %>%
mutate(date = daterated) %>%
arrange(id, daterated)
cat("Data loading and merging complete.\n")
View(df)
# View data for id = 210
#df %>% filter(id == 210) %>% arrange(daterated) %>% select(id, date, daterated, menses, ovtoday, any_of(alldailyvars)) %>% View()
# --- 0. Manual Data Fixes ---
# This section is for correcting known, specific errors in the raw data
# before any calculations are performed.
df <- df %>%
mutate(
# Correct the erroneous date for the outlier participant.
date = if_else(
id == 210 & date == as.Date("2021-11-21"),
as.Date("2020-11-21"),
date
),
# Also update the 'daterated' column to match
daterated = date
)
# --- 1. Merge Final, Manually-Confirmed Cycle Dates ---
# This step is done first to ensure the final 'menses' and 'ovtoday' columns
# are available for any subsequent calculations.
final_dates <- read_xls(path_final_dates) %>%
select(id, date, menses = menses_final, ovtoday = ovtoday_final) %>%
mutate(id = as.character(id), date = as.Date(date), menses = as.integer(menses), ovtoday = as.integer(ovtoday)) %>%
filter(menses == 1 | ovtoday == 1)
df <- df %>%
select(-any_of(c("menses", "ovtoday", "StartPeriod", "PosLHTest", "LHposdayfirst"))) %>%
mutate(id = as.character(id)) %>%
left_join(final_dates, by = c("id", "date")) %>%
mutate(
menses = coalesce(menses, 0L),
ovtoday = coalesce(ovtoday, 0L),
id = as.factor(id)
)
# --- 2. Score Questionnaires & Other Raw Variables ---
# This section takes the raw item-level data and calculates all necessary
# summary scores, mean scores, and symptom counts.
df <- df %>%
mutate(
# First, ensure all items that will be used in calculations are numeric.
across(starts_with(c("CSS_B_", "CSS_Function_", "DEBQ_", "BDEFS_", "UPPS_")), as.numeric),
# --- ADHD Symptoms (CSS) ---
# Calculate the mean severity for the main subscales.
CSS_Inatt = rowMeans(across(c(CSS_B_1, CSS_B_3, CSS_B_5, CSS_B_7, CSS_B_9, CSS_B_11, CSS_B_13, CSS_B_15, CSS_B_17)), na.rm = TRUE),
CSS_HypImp = rowMeans(across(c(CSS_B_2, CSS_B_4, CSS_B_6, CSS_B_8, CSS_B_10, CSS_B_12, CSS_B_14, CSS_B_16, CSS_B_18)), na.rm = TRUE),
# Calculate Symptom Counts by summing the number of items rated 2 ("Often") or 3 ("Very Often").
# The formula `~ .x >= 2` checks this condition for each item.
# ACTION REQUIRED: Please confirm the item lists for Hyp_Count and Imp_Count are correct for your scale.
CSS_Inatt_Count = rowSums(across(c(CSS_B_1, CSS_B_3, CSS_B_5, CSS_B_7, CSS_B_9, CSS_B_11, CSS_B_13, CSS_B_15, CSS_B_17), ~ .x >= 2), na.rm = TRUE),
CSS_Hyp_Count   = rowSums(across(c(CSS_B_10, CSS_B_12, CSS_B_14, CSS_B_16, CSS_B_18), ~ .x >= 2), na.rm = TRUE), # Example items
CSS_Imp_Count   = rowSums(across(c(CSS_B_2, CSS_B_4, CSS_B_6, CSS_B_8), ~ .x >= 2), na.rm = TRUE),          # Example items
CSS_HypImp_Count = CSS_Hyp_Count + CSS_Imp_Count,
# --- Executive Function (BDEFS) ---
BDEFS_Total = rowMeans(across(starts_with("BDEFS_")), na.rm = TRUE),
# ACTION REQUIRED: Please confirm these subscale items are correct.
BDEFS_WM_avg = rowMeans(across(c(BDEFS_5)), na.rm = TRUE), # Working Memory
BDEFS_RI_avg = rowMeans(across(c(BDEFS_6)), na.rm = TRUE), # Response Inhibition
# --- Eating Behavior (DEBQ) ---
DEBQ_Total = rowMeans(across(starts_with("DEBQ_")), na.rm = TRUE))
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
library(tidyverse)
library(janitor)
library(haven)
library(readxl)
library(zoo)
library(lubridate)
library(conflicted)
library(menstrualcycleR)
library(gridExtra)
library(ggvenn)
# Explicitly state our function preferences to avoid ambiguity
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
# This is the single control panel for the pipeline.
# --- Input File Paths (Using Your Direct, Hardcoded Paths) ---
path_raw_daily <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/2025.06.02 Daily Master.sav"
path_supp_hormones <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/03_cleaned_data/adhdcyc_daily_2024_07_09_horm.csv"
path_final_hormone_batch <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-25/Martel_IRB52576_Results_E2_P4_LH 7-23-2025.csv"
path_final_dates <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-09-26/ADHDCYCLE_menses_ov_dates_FINAL.xls"
path_omit_ids <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-26/adhdcyc_omit.xlsx"
# --- Output Folder ---
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
output_folder <- file.path(output_folder_base, format(Sys.Date(), "%Y-%m-%d_Run"))
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# --- Variable Lists ---
# Note: Column names are back to CamelCase to match the raw SPSS file.
dv_list <- c("CSS_Inatt", "CSS_HypImp", "score_pinball", "score_robot", "BDEFS_Total", "BDEFS_WM_avg", "BDEFS_RI_avg", "UPPS_NU_avg", "UPPS_PU_avg", "UPPS_Premed_avg", "UPPS_Persev_avg", "UPPS_Sens_avg", "DEBQ_Total", "CSS_Inatt_Count", "CSS_Hyp_Count", "CSS_Imp_Count", "CSS_HypImp_Count", paste0("DRSP_", 1:23))
hormlist <- c("E2", "P4", "LH")
alldailyvars <- c(dv_list, hormlist)
# --- Plotting Configuration ---
metrics_to_plot <- tibble::tribble(
~metric_filter, ~folder_name, ~plot_subtitle, ~needs_facet, ~y_axis_label,
"raw", "01_raw_faceted", "Raw Daily Values", TRUE, "Hormone Value",
"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load All Raw Data Sources ---
raw_daily <- read_sav(path_raw_daily)
supp_hormones <- read_csv(path_supp_hormones, show_col_types = FALSE)
final_hormone_batch <- read_csv(path_final_hormone_batch, show_col_types = FALSE)
final_dates <- read_xls(path_final_dates)
# --- 2. Prepare and Combine Hormone Data ---
# Prepare supplemental hormones
supp_hormones_prep <- supp_hormones %>%
rename(daterated = date) %>%
mutate(id = as.numeric(ID), daterated = ymd(daterated))
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
library(tidyverse)
library(janitor)
library(haven)
library(readxl)
library(zoo)
library(lubridate)
library(conflicted)
library(menstrualcycleR)
library(gridExtra)
library(ggvenn)
# Explicitly state our function preferences to avoid ambiguity
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
# This function is used during the data loading step to ensure key columns
# have consistent names across all raw files.
standardize_index_names <- function(df) {
df %>%
rename_with(~ case_when(
grepl("\\b([Dd]ate.?rated)\\b", .x) ~ "daterated",
grepl("^ID$", .x, ignore.case = TRUE) ~ "id",
grepl("\\b([Ee]strogen|[Ee]stradiol|[Ee]2)\\b", .x) ~ "E2",
grepl("\\b([Pp]rogesterone|[Pp]4)\\b", .x) ~ "P4",
TRUE ~ .x
))
}
# This is the single control panel for the pipeline.
# --- Input File Paths (Using Your Direct, Hardcoded Paths) ---
path_raw_daily <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/2025.06.02 Daily Master.sav"
path_supp_hormones <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/03_cleaned_data/adhdcyc_daily_2024_07_09_horm.csv"
path_final_hormone_batch <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-25/Martel_IRB52576_Results_E2_P4_LH 7-23-2025.csv"
path_final_dates <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-09-26/ADHDCYCLE_menses_ov_dates_FINAL.xls"
path_omit_ids <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-26/adhdcyc_omit.xlsx"
# --- Output Folder ---
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
output_folder <- file.path(output_folder_base, format(Sys.Date(), "%Y-%m-%d_Run"))
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# --- Variable Lists ---
# Note: Column names are CamelCase to match the raw SPSS file.
dv_list <- c("CSS_Inatt", "CSS_HypImp", "score_pinball", "score_robot", "BDEFS_Total", "BDEFS_WM_avg", "BDEFS_RI_avg", "UPPS_NU_avg", "UPPS_PU_avg", "UPPS_Premed_avg", "UPPS_Persev_avg", "UPPS_Sens_avg", "DEBQ_Total", "CSS_Inatt_Count", "CSS_Hyp_Count", "CSS_Imp_Count", "CSS_HypImp_Count", paste0("DRSP_", 1:23))
hormlist <- c("E2", "P4", "LH")
alldailyvars <- c(dv_list, hormlist)
# --- Plotting Configuration ---
metrics_to_plot <- tibble::tribble(
~metric_filter, ~folder_name, ~plot_subtitle, ~needs_facet, ~y_axis_label,
"raw", "01_raw_faceted", "Raw Daily Values", TRUE, "Hormone Value",
"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load All Data Sources ---
raw_daily <- read_sav(path_raw_daily)
supp_hormones <- read_csv(path_supp_hormones, show_col_types = FALSE)
final_hormone_batch <- read_csv(path_final_hormone_batch, show_col_types = FALSE)
# --- 2. Prepare Each Data Source ---
raw_daily_prep <- raw_daily %>%
standardize_index_names() %>%
mutate(id = as.numeric(id), daterated = as.Date(daterated))
supp_hormones_prep <- supp_hormones %>%
rename(daterated = date) %>%
mutate(id = as.numeric(ID), daterated = ymd(daterated))
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
library(tidyverse)
library(janitor)
library(haven)
library(readxl)
library(zoo)
library(lubridate)
library(conflicted)
library(menstrualcycleR)
library(gridExtra)
library(ggvenn)
# Explicitly state our function preferences to avoid ambiguity
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
# This function is used during the data loading step to ensure key columns
# have consistent names across all raw files.
standardize_index_names <- function(df) {
df %>%
rename_with(~ case_when(
grepl("\\b([Dd]ate.?rated)\\b", .x) ~ "daterated",
grepl("^ID$", .x, ignore.case = TRUE) ~ "id",
grepl("\\b([Ee]strogen|[Ee]stradiol|[Ee]2)\\b", .x) ~ "E2",
grepl("\\b([Pp]rogesterone|[Pp]4)\\b", .x) ~ "P4",
TRUE ~ .x
))
}
# This is the single control panel for the pipeline.
# --- Input File Paths (Using Your Direct, Hardcoded Paths) ---
path_raw_daily <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/2025.06.02 Daily Master.sav"
path_supp_hormones <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/03_cleaned_data/adhdcyc_daily_2024_07_09_horm.csv"
path_final_hormone_batch <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-25/Martel_IRB52576_Results_E2_P4_LH 7-23-2025.csv"
path_final_dates <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-09-26/ADHDCYCLE_menses_ov_dates_FINAL.xls"
path_omit_ids <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-26/adhdcyc_omit.xlsx"
# --- Output Folder ---
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
output_folder <- file.path(output_folder_base, format(Sys.Date(), "%Y-%m-%d_Run"))
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# --- Variable Lists ---
# Note: Column names are CamelCase to match the raw SPSS file.
dv_list <- c("CSS_Inatt", "CSS_HypImp", "score_pinball", "score_robot", "BDEFS_Total", "BDEFS_WM_avg", "BDEFS_RI_avg", "UPPS_NU_avg", "UPPS_PU_avg", "UPPS_Premed_avg", "UPPS_Persev_avg", "UPPS_Sens_avg", "DEBQ_Total", "CSS_Inatt_Count", "CSS_Hyp_Count", "CSS_Imp_Count", "CSS_HypImp_Count", paste0("DRSP_", 1:23))
hormlist <- c("E2", "P4", "LH")
alldailyvars <- c(dv_list, hormlist)
# --- Plotting Configuration ---
metrics_to_plot <- tibble::tribble(
~metric_filter, ~folder_name, ~plot_subtitle, ~needs_facet, ~y_axis_label,
"raw", "01_raw_faceted", "Raw Daily Values", TRUE, "Hormone Value",
"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load All Data Sources ---
raw_daily <- read_sav(path_raw_daily)
supp_hormones <- read_csv(path_supp_hormones, show_col_types = FALSE)
final_hormone_batch <- read_csv(path_final_hormone_batch, show_col_types = FALSE)
# --- 2. Prepare Each Data Source ---
raw_daily_prep <- raw_daily %>%
standardize_index_names() %>%
mutate(id = as.numeric(id), daterated = as.Date(daterated))
supp_hormones_prep <- supp_hormones %>%
rename(daterated = date) %>%
mutate(id = as.numeric(ID), daterated = ymd(daterated))
# This chunk sets the global options for the entire R Markdown document.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999, digits = 3)
library(tidyverse)
library(janitor)
library(haven)
library(readxl)
library(zoo)
library(lubridate)
library(conflicted)
library(menstrualcycleR)
library(gridExtra)
library(ggvenn)
# Explicitly state our function preferences to avoid ambiguity
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("select", "dplyr")
# This function is used during the data loading step to ensure key columns
# have consistent names across all raw files.
standardize_index_names <- function(df) {
df %>%
rename_with(~ case_when(
grepl("\\b([Dd]ate.?rated)\\b", .x) ~ "daterated",
grepl("^ID$", .x, ignore.case = TRUE) ~ "id",
grepl("\\b([Ee]strogen|[Ee]stradiol|[Ee]2)\\b", .x) ~ "E2",
grepl("\\b([Pp]rogesterone|[Pp]4)\\b", .x) ~ "P4",
TRUE ~ .x
))
}
# This is the single control panel for the pipeline.
# --- Input File Paths (Using Your Direct, Hardcoded Paths) ---
path_raw_daily <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-20/2025.06.02 Daily Master.sav"
path_supp_hormones <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/03_cleaned_data/adhdcyc_daily_2024_07_09_horm.csv"
path_final_hormone_batch <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-25/Martel_IRB52576_Results_E2_P4_LH 7-23-2025.csv"
path_final_dates <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-09-26/ADHDCYCLE_menses_ov_dates_FINAL.xls"
path_omit_ids <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/02_datasets/CYCADHD_DAILY/02_data_prep_workspace/2025-08-26/adhdcyc_omit.xlsx"
# --- Output Folder ---
output_folder_base <- "~/Library/CloudStorage/Box-Box/00 - CLEAR Lab (Locked Folders)/02 - Data Management, Analysis, and Papers/Studies_Projects/CYCLEADHD/03_analytic_projects/CYCADHD_PRIMARY/03_code_dataedits_output"
output_folder <- file.path(output_folder_base, format(Sys.Date(), "%Y-%m-%d_Run"))
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
# --- Variable Lists ---
# Note: Column names are CamelCase to match the raw SPSS file.
dv_list <- c("CSS_Inatt", "CSS_HypImp", "score_pinball", "score_robot", "BDEFS_Total", "BDEFS_WM_avg", "BDEFS_RI_avg", "UPPS_NU_avg", "UPPS_PU_avg", "UPPS_Premed_avg", "UPPS_Persev_avg", "UPPS_Sens_avg", "DEBQ_Total", "CSS_Inatt_Count", "CSS_Hyp_Count", "CSS_Imp_Count", "CSS_HypImp_Count", paste0("DRSP_", 1:23))
hormlist <- c("E2", "P4", "LH")
alldailyvars <- c(dv_list, hormlist)
# --- Plotting Configuration ---
metrics_to_plot <- tibble::tribble(
~metric_filter, ~folder_name, ~plot_subtitle, ~needs_facet, ~y_axis_label,
"raw", "01_raw_faceted", "Raw Daily Values", TRUE, "Hormone Value",
"3roll", "02_raw_3roll_faceted", "3-Day Rolling Average", TRUE, "Hormone Value",
"5roll", "03_raw_5roll_faceted", "5-Day Rolling Average", TRUE, "Hormone Value",
"zd", "04_person_standardized", "Person-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)",
"szd", "05_sample_standardized", "Sample-Standardized Daily Values", FALSE, "Standardized Value (Z-Score)"
)
# --- 1. Load All Data Sources ---
raw_daily <- read_sav(path_raw_daily)
supp_hormones <- read_csv(path_supp_hormones, show_col_types = FALSE)
final_hormone_batch <- read_csv(path_final_hormone_batch, show_col_types = FALSE)
# --- 2. Prepare Each Data Source ---
raw_daily_prep <- raw_daily %>%
standardize_index_names() %>%
mutate(id = as.numeric(id), daterated = as.Date(daterated))
supp_hormones_prep <- supp_hormones %>%
rename(daterated = date) %>%
# THE TYPO WAS HERE: The column is 'id' (lowercase), not 'ID' (uppercase).
mutate(id = as.numeric(id), daterated = ymd(daterated))
final_hormone_batch_prep <- final_hormone_batch %>%
standardize_index_names() %>%
mutate(id = as.numeric(id), daterated = as.Date(daterated))
# --- 3. Build Final 'df' with Sequential Joins ---
df <- raw_daily_prep %>%
# Sequentially join and coalesce data from supplemental files
left_join(supp_hormones_prep, by = c("id", "daterated"), suffix = c(".main", ".supp")) %>%
left_join(final_hormone_batch_prep, by = c("id", "daterated"), suffix = c(".main2", ".final")) %>%
mutate(
E2 = coalesce(E2.final, E2.supp, E2.main),
P4 = coalesce(P4.final, P4.supp, P4.main),
LH = coalesce(LH.final, LH.supp, LH.main),
daterated = as.Date(daterated)
) %>%
select(-ends_with(c(".main", ".supp", ".main2", ".final"))) %>%
# --- 4. Create Continuous Timeline ---
filter(!is.na(id) & !is.na(daterated)) %>%
distinct(id, daterated, .keep_all = TRUE) %>%
group_by(id) %>%
complete(daterated = seq.Date(min(daterated, na.rm = TRUE), max(daterated, na.rm = TRUE), by = "day")) %>%
ungroup() %>%
mutate(date = daterated) %>%
arrange(id, daterated)
